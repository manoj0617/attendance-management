<%layout("../layouts/adminBoilerplate") -%>
<body>
  <div class="container mt-5">
    <div class="card shadow">
      <div class="card-header bg-primary text-white">
        <h2 class="card-title">Share Resource</h2>
      </div>
      <div class="card-body">
        <!-- Debug info section -->
        <div id="debugInfo" class="alert alert-info mb-3">
          <pre id="debugText" class="mb-0"></pre>
        </div>
        
        <!-- Error alert -->
        <div id="errorAlert" class="alert alert-danger d-none" role="alert"></div>
        
        <!-- Success alert -->
        <div id="successAlert" class="alert alert-success d-none" role="alert"></div>
        
        <form id="resourceForm" action="/admin/resources/save" method="POST">
          <!-- Resource Details Section -->
          <div class="mb-4">
            <h4 class="mb-3">Resource Details</h4>
            
            <div class="mb-3">
              <label for="title" class="form-label">Title <span class="text-danger">*</span></label>
              <input type="text" class="form-control" id="title" name="title" required>
            </div>
            
            <div class="mb-3">
              <label for="description" class="form-label">Description</label>
              <textarea class="form-control" id="description" name="description" rows="3"></textarea>
            </div>

            <div class="mb-3">
              <label for="resourceType" class="form-label">Resource Type <span class="text-danger">*</span></label>
              <select class="form-select" id="resourceType" name="resourceType" required>
                <option value="">Select Resource Type</option>
                <option value="circular">Circular</option>
                <option value="notice">Notice</option>
                <option value="event">Event</option>
              </select>
            </div>
          </div>
          
          <!-- File Selection Section -->
          <div class="mb-4">
            <h4 class="mb-3">File Selection</h4>
            
            <div class="form-group">
              <label for="filePicker" class="form-label">Select File from Google Drive <span class="text-danger">*</span></label>
              <div class="d-flex align-items-center">
                <button type="button" id="pickerButton" class="btn btn-secondary" >
                  <span id="pickerButtonText">Select File</span>
                  <span id="pickerSpinner" class="spinner-border spinner-border-sm ms-2 d-none" role="status"></span>
                </button>
                <span id="selectedFileName" class="ms-3 text-success"></span>
              </div>
            </div>
          </div>
          
          <!-- Access Control Section -->
          <div class="mb-4">
            <h4 class="mb-3">Access Control</h4>
            
            <div class="mb-3">
              <div class="form-check">
                <input class="form-check-input" type="checkbox" id="allYears" name="allYears">
                <label class="form-check-label" for="allYears">
                  Share with all years
                </label>
              </div>
            </div>
            
            <div id="permissionsContainer">
              <!-- Permission sets will be added here dynamically -->
            </div>
            
            <button type="button" id="addPermissionBtn" class="btn btn-outline-primary" disabled>
              <i class="bi bi-plus-circle me-2"></i>Add More Permissions
            </button>
          </div>
  
          <!-- Hidden inputs for file data -->
          <input type="hidden" id="fileId" name="fileId">
          <input type="hidden" id="fileLink" name="fileLink">
          <input type="hidden" id="fileName" name="fileName">
          <input type="hidden" id="uploader" name="uploader" value="<%= currUser._id %>">
  
          <!-- Submit Button -->
          <div class="text-end">
            <button type="submit" id="saveButton" class="btn btn-primary">Save Resource</button>
          </div>
        </form>
      </div>
    </div>
  </div>

  <!-- Load required Google APIs -->
  <script src="https://apis.google.com/js/api.js"></script>
  <script src="https://accounts.google.com/gsi/client"></script>

  <script>
  // DOM Elements
  const elements = {
    pickerButton: document.getElementById('pickerButton'),
    pickerButtonText: document.getElementById('pickerButtonText'),
    pickerSpinner: document.getElementById('pickerSpinner'),
    selectedFileName: document.getElementById('selectedFileName'),
    errorAlert: document.getElementById('errorAlert'),
    successAlert: document.getElementById('successAlert'),
    debugInfo: document.getElementById('debugInfo'),
    debugText: document.getElementById('debugText'),
    saveButton: document.getElementById('saveButton'),
    fileId: document.getElementById('fileId'),
    fileLink: document.getElementById('fileLink'),
    fileName: document.getElementById('fileName'),
    uploader: document.getElementById('uploader'),
    permissionsContainer: document.getElementById('permissionsContainer'),
    addPermissionBtn: document.getElementById('addPermissionBtn'),
    resourceForm: document.getElementById('resourceForm'),
    allYearsCheckbox: document.getElementById('allYears')
  };

  // Google API Configuration
  const API_KEY = '<%= key %>';
  const CLIENT_ID = '<%= process.env.CLIENT_ID %>';
  const SCOPES = ['https://www.googleapis.com/auth/drive.readonly'];

  let pickerApiLoaded = false;
  let tokenClient;
  let accessToken = null;

  // Form Data Cache
  const formDataManager = {
    cache: {
      years: [],
      branches: {},
      sections: {},
      permissions: new Set() // Track unique permission combinations
    },

    async fetchYears() {
      try {
        debug('Fetching academic years...');
        const response = await fetch('/admin/api/academic-years');
        if (!response.ok) {
          const errorText = await response.text();
          debug('Error response:', errorText);
          throw new Error('Failed to fetch academic years');
        }
        const data = await response.json();
        this.cache.years = data;
        debug('Academic years fetched successfully:', data);
        return data;
      } catch (error) {
        debug('Error fetching years:', error);
        throw error;
      }
    },

    async fetchBranches(yearId) {
      try {
        if (!yearId) throw new Error('Year ID is required');
        
        if (this.cache.branches[yearId]) {
          return this.cache.branches[yearId];
        }

        const response = await fetch(`/admin/api/branches?yearId=${yearId}`);
        if (!response.ok) throw new Error('Failed to fetch branches');
        
        const data = await response.json();
        this.cache.branches[yearId] = data;
        return data;
      } catch (error) {
        debug('Error fetching branches:', error);
        throw error;
      }
    },

    async fetchSections(yearId, branchId) {
      try {
        if (!yearId || !branchId) throw new Error('Year ID and Branch ID are required');
        
        const cacheKey = `${yearId}-${branchId}`;
        if (this.cache.sections[cacheKey]) {
          return this.cache.sections[cacheKey];
        }

        const response = await fetch(`/admin/api/sections?yearId=${yearId}&branchId=${branchId}`);
        if (!response.ok) throw new Error('Failed to fetch sections');
        
        const data = await response.json();
        this.cache.sections[cacheKey] = data;
        return data;
      } catch (error) {
        debug('Error fetching sections:', error);
        throw error;
      }
    },

    // Check if permission combination already exists
    isPermissionDuplicate(year, branch, section) {
      const key = `${year}-${branch}-${section}`;
      if (this.cache.permissions.has(key)) {
        return true;
      }
      this.cache.permissions.add(key);
      return false;
    },

    // Clear permission when removed
    removePermission(year, branch, section) {
      const key = `${year}-${branch}-${section}`;
      this.cache.permissions.delete(key);
    }
  };

  // Debug logging
  function debug(message, object = null) {
    const timestamp = new Date().toISOString();
    let debugMessage = `[${timestamp}] ${message}`;
    if (object) {
      debugMessage += '\n' + JSON.stringify(object, null, 2);
    }
    elements.debugText.textContent += debugMessage + '\n';
    console.log(debugMessage, object);
  }

  // Error handling
  function showError(message, isRetryable = false) {
    const errorMessage = isRetryable ? 
      `${message} Please try again or refresh the page.` : 
      message;
    
    if (elements.errorAlert) {
      elements.errorAlert.textContent = errorMessage;
      elements.errorAlert.classList.remove('d-none');
      elements.successAlert.classList.add('d-none');
    }
    debug('Error: ' + errorMessage);
  }

  // Success message handling
  function showSuccess(message) {
    if (elements.successAlert) {
      elements.successAlert.textContent = message;
      elements.successAlert.classList.remove('d-none');
      elements.errorAlert.classList.add('d-none');
    }
    debug('Success: ' + message);
  }

  // Loading state management
  function setLoading(isLoading) {
    elements.pickerButton.disabled = isLoading;
    elements.pickerSpinner.classList.toggle('d-none', !isLoading);
    elements.pickerButtonText.textContent = isLoading ? 'Loading...' : 'Select File';
  }

  // Initialize Google Picker API
  async function initializeGooglePicker() {
    try {
      debug('Initializing Google Picker API...');

      // Load the picker API
      await new Promise((resolve, reject) => {
        gapi.load('picker', {
          callback: resolve,
          onerror: reject
        });
      });

      debug('Picker API loaded successfully');

      // Initialize token client
      tokenClient = google.accounts.oauth2.initTokenClient({
        client_id: CLIENT_ID,
        scope: SCOPES.join(' '),
        callback: (tokenResponse) => {
          if (tokenResponse.error !== undefined) {
            debug('Token error:', tokenResponse.error);
            showError('Authentication failed');
            return;
          }
          accessToken = tokenResponse.access_token;
          debug('Token obtained successfully');
          elements.pickerButton.disabled = false;
        }
      });

      pickerApiLoaded = true;
      debug('Google Picker initialized successfully');

    } catch (error) {
      debug('Error initializing Google Picker:', error);
      throw new Error('Failed to initialize Google Picker');
    }
  }

  // Show picker
  async function showPicker() {
    try {
      setLoading(true);
      
      if (!accessToken) {
        tokenClient.requestAccessToken({ prompt: 'consent' });
        return;
      }

      const picker = new google.picker.PickerBuilder()
        .addView(new google.picker.DocsView()
          .setIncludeFolders(true)
          .setSelectFolderEnabled(false)
          .setMimeTypes('application/pdf,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/vnd.ms-powerpoint,application/vnd.openxmlformats-officedocument.presentationml.presentation')
        )
        .setOAuthToken(accessToken)
        .setDeveloperKey(API_KEY)
        .setCallback(pickerCallback)
        .setOrigin(window.location.protocol + '//' + window.location.host)
        .setSize(800, 600)
        .setTitle('Select a file')
        .build();
        
      picker.setVisible(true);
      
    } catch (error) {
      debug('Error showing picker:', error);
      showError('Failed to show file picker');
    } finally {
      setLoading(false);
    }
  }

  // Picker callback
  function pickerCallback(data) {
    if (data.action === google.picker.Action.PICKED) {
      const file = data.docs[0];
      elements.fileId.value = file.id;
      elements.fileLink.value = file.url || `https://drive.google.com/file/d/${file.id}/view`;
      elements.fileName.value = file.name;
      elements.selectedFileName.textContent = `Selected: ${file.name}`;
      elements.saveButton.disabled = false;
      
      debug('File selected:', {
        id: file.id,
        name: file.name,
        mimeType: file.mimeType
      });
    }
  }

  // Initialize permission sets
  async function initializePermissionSets() {
    try {
      debug('Initializing permission sets...');
      
      // Fetch initial data
      await formDataManager.fetchYears();
      
      // Clear and setup container
      elements.permissionsContainer.innerHTML = '';
      addPermissionSet();
      
      // Enable add permission button
      elements.addPermissionBtn.disabled = false;
      
      // Setup event listeners
      elements.addPermissionBtn.addEventListener('click', addPermissionSet);
      elements.allYearsCheckbox.addEventListener('change', handleAllYearsChange);
      
      debug('Permission sets initialized successfully');
      
    } catch (error) {
      debug('Error initializing permission sets:', error);
      throw new Error('Failed to initialize permission sets');
    }
  }

  // Add permission set
  function addPermissionSet() {
    const index = elements.permissionsContainer.children.length;
    const permissionSet = document.createElement('div');
    permissionSet.className = 'permission-set border rounded p-3 mb-3';
    
    permissionSet.innerHTML = `
      <div class="row g-3">
        <div class="col-md-4">
          <label class="form-label">Academic Year <span class="text-danger">*</span></label>
          <select class="form-select year-select" name="years[${index}][year]" required>
            <option value="">Select Year</option>
            ${formDataManager.cache.years.map(year => 
              `<option value="${year._id}">${year.name}</option>`
            ).join('')}
          </select>
        </div>
        
        <div class="col-md-3">
          <label class="form-label">Branch <span class="text-danger">*</span></label>
          <select class="form-select branch-select" name="years[${index}][branches][0][branch]" required disabled>
            <option value="">Select Branch</option>
          </select>
          <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" name="years[${index}][allBranches]" id="allBranches${index}">
            <label class="form-check-label" for="allBranches${index}">
              All Branches
            </label>
          </div>
        </div>
        
        <div class="col-md-3">
          <label class="form-label">Section <span class="text-danger">*</span></label>
          <select class="form-select section-select" name="years[${index}][branches][0][sections][0]" required disabled>
            <option value="">Select Section</option>
          </select>
          <div class="form-check mt-2">
            <input class="form-check-input" type="checkbox" name="years[${index}][branches][0][allSections]" id="allSections${index}">
            <label class="form-check-label" for="allSections${index}">
              All Sections
            </label>
          </div>
        </div>
        
        <div class="col-md-1 d-flex align-items-end">
          <button type="button" class="btn btn-danger remove-permission">×</button>
        </div>
      </div>
    `;

    setupPermissionSetHandlers(permissionSet);
    elements.permissionsContainer.appendChild(permissionSet);
  }

  // Setup permission set handlers
  function setupPermissionSetHandlers(permissionSet) {
    const yearSelect = permissionSet.querySelector('.year-select');
    const branchSelect = permissionSet.querySelector('.branch-select');
    const sectionSelect = permissionSet.querySelector('.section-select');
    const allBranchesCheckbox = permissionSet.querySelector('[id^="allBranches"]');
    const allSectionsCheckbox = permissionSet.querySelector('[id^="allSections"]');
    const removeButton = permissionSet.querySelector('.remove-permission');

    yearSelect.addEventListener('change', async () => {
      const yearId = yearSelect.value;
      branchSelect.disabled = !yearId;
      branchSelect.innerHTML = '<option value="">Select Branch</option>';
      sectionSelect.disabled = true;
      sectionSelect.innerHTML = '<option value="">Select Section</option>';
      
      if (yearId) {
        try {
          const branches = await formDataManager.fetchBranches(yearId);
          populateSelect(branchSelect, branches);
        } catch (error) {
          showError('Failed to load branches: ' + error.message);
        }
      }
    });

    branchSelect.addEventListener('change', async () => {
      const yearId = yearSelect.value;
      const branchId = branchSelect.value;
      sectionSelect.disabled = !branchId;
      sectionSelect.innerHTML = '<option value="">Select Section</option>';
      
      if (yearId && branchId) {
        try {
          const sections = await formDataManager.fetchSections(yearId, branchId);
          populateSelect(sectionSelect, sections);
        } catch (error) {
          showError('Failed to load sections: ' + error.message);
        }
      }
    });

    // Check for duplicates when section is selected
    sectionSelect.addEventListener('change', () => {
      const yearId = yearSelect.value;
      const branchId = branchSelect.value;
      const sectionId = sectionSelect.value;

      if (yearId && branchId && sectionId) {
        if (formDataManager.isPermissionDuplicate(yearId, branchId, sectionId)) {
          showError('This combination already exists');
          sectionSelect.value = '';
        }
      }
    });

    allBranchesCheckbox.addEventListener('change', (event) => {
      branchSelect.disabled = event.target.checked;
      sectionSelect.disabled = event.target.checked;
      allSectionsCheckbox.disabled = event.target.checked;
      if (event.target.checked) {
        branchSelect.value = '';
        sectionSelect.value = '';
        allSectionsCheckbox.checked = false;
      }
    });

    allSectionsCheckbox.addEventListener('change', (event) => {
      sectionSelect.disabled = event.target.checked;
      if (event.target.checked) {
        sectionSelect.value = '';
      }
    });

    removeButton.addEventListener('click', () => {
      const yearId = yearSelect.value;
      const branchId = branchSelect.value;
      const sectionId = sectionSelect.value;
      
      if (yearId && branchId && sectionId) {
        formDataManager.removePermission(yearId, branchId, sectionId);
      }
      
      permissionSet.remove();
    });
  }

  // Handle all years checkbox change
  function handleAllYearsChange(event) {
    const isAllYears = event.target.checked;
    elements.permissionsContainer.style.display = isAllYears ? 'none' : 'block';
    elements.addPermissionBtn.style.display = isAllYears ? 'none' : 'block';
    
    if (isAllYears) {
      formDataManager.cache.permissions.clear();
      const permissionSets = elements.permissionsContainer.querySelectorAll('.permission-set');
      permissionSets.forEach(set => {
        const yearSelect = set.querySelector('.year-select');
        const branchSelect = set.querySelector('.branch-select');
        const sectionSelect = set.querySelector('.section-select');
        const allBranchesCheckbox = set.querySelector('[id^="allBranches"]');
        const allSectionsCheckbox = set.querySelector('[id^="allSections"]');
        
        yearSelect.value = '';
        branchSelect.value = '';
        sectionSelect.value = '';
        allBranchesCheckbox.checked = false;
        allSectionsCheckbox.checked = false;
      });
    }
  }

  // Populate select element
  function populateSelect(select, options) {
    select.innerHTML = '<option value="">Select option</option>';
    options.forEach(option => {
      const optElement = document.createElement('option');
      optElement.value = option._id;
      optElement.textContent = option.name;
      select.appendChild(optElement);
    });
  }

  // Form submission handler
  async function handleFormSubmit(event) {
    event.preventDefault();
    
    try {
      const submitButton = elements.saveButton;
      submitButton.disabled = true;
      submitButton.innerHTML = `
        <span class="spinner-border spinner-border-sm me-2" role="status"></span>
        Saving...
      `;

      const formData = new FormData(event.target);
      const accessControl = {
        allYears: formData.get('allYears') === 'on',
        years: []
      };

      // Only add years data if not sharing with all years
      if (!accessControl.allYears) {
        const permissionSets = elements.permissionsContainer.querySelectorAll('.permission-set');
        permissionSets.forEach((set, yearIndex) => {
          const yearData = {
            year: formData.get(`years[${yearIndex}][year]`),
            allBranches: formData.get(`years[${yearIndex}][allBranches]`) === 'on',
            branches: []
          };

          if (!yearData.allBranches) {
            const branchData = {
              branch: formData.get(`years[${yearIndex}][branches][0][branch]`),
              allSections: formData.get(`years[${yearIndex}][branches][0][allSections]`) === 'on',
              sections: []
            };

            if (!branchData.allSections) {
              const sectionValue = formData.get(`years[${yearIndex}][branches][0][sections][0]`);
              if (sectionValue) {
                branchData.sections.push(sectionValue);
              }
            }

            yearData.branches.push(branchData);
          }

          accessControl.years.push(yearData);
        });
      }

      const data = {
        title: formData.get('title'),
        description: formData.get('description'),
        resourceType: formData.get('resourceType'),
        fileId: formData.get('fileId'),
        fileLink: formData.get('fileLink'),
        fileName: formData.get('fileName'),
        uploader: formData.get('uploader'),
        uploaderType: 'Admin',
        accessControl
      };

      debug('Submitting form data:', data);

      const response = await fetch('/admin/resources/save', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(data)
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save resource');
      }

      const result = await response.json();
      showSuccess(result.message);
      
      setTimeout(() => {
        window.location.href = '/admin/resources';
      }, 1500);

    } catch (error) {
      showError(error.message);
      debug('Form submission error:', error);
    } finally {
      const submitButton = elements.saveButton;
      submitButton.disabled = false;
      submitButton.innerHTML = 'Save Resource';
    }
  }

  // Initialize application
  async function initializeApp() {
    try {
      debug('Starting application initialization');
      
      // Initialize form data first
      await initializePermissionSets();
      debug('Form data initialized successfully');
      
      // Initialize Google APIs
      await initializeGooglePicker();
      debug('Google Picker initialized successfully');
      
      // Setup form submission handler
      elements.resourceForm.addEventListener('submit', handleFormSubmit);
      debug('Form submission handler initialized');
      
      // Setup Google Picker button
      elements.pickerButton.addEventListener('click', showPicker);
      debug('Picker button handler initialized');
      
      debug('Application initialized successfully');
      
    } catch (error) {
      debug('Critical initialization error:', error);
      showError('Failed to initialize application. Please try again or refresh the page.');
      
      // Disable interactive elements
      elements.pickerButton.disabled = true;
      elements.saveButton.disabled = true;
      elements.addPermissionBtn.disabled = true;
    }
  }

  // Initialize the application when the page loads
  window.addEventListener('load', initializeApp);
  </script>
</body>