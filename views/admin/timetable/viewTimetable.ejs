<%- layout("../layouts/adminBoilerplate") -%>
<body>
  <div class="container mt-5">
    <h1>View and Edit Timetable</h1>

    <!-- Table for viewing and editing timetable -->
    <div id="timetableContainer">
        <h2>Class Timetable</h2>
        <table class="table table-bordered mt-5" style="display: block; overflow-x: auto; white-space: nowrap;">
          <thead>
            <tr>
              <th>Day</th>
              <% for (let i = 1; i <= timetable.numPeriods; i++) { %>
                <th>
                  Period <%= i %><br>
                  <input type="time" id="startTime_<%= i %>" value="<%= timetable.periods.find(p => p.hour === i)?.startTime || '' %>">
                  <input type="time" id="endTime_<%= i %>" value="<%= timetable.periods.find(p => p.hour === i)?.endTime || '' %>">
                </th>
              <% } %>
            </tr>
          </thead>
          <tbody>
            <% const days = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; %>
            <% for (let i = 0; i < 7; i++) { %>
              <tr>
                <td><%= days[i] %></td>
                <% for (let j = 1; j <= timetable.numPeriods; j++) { %>
                  <% 
                    const groupedPeriodsForCell = groupedPeriods[days[i]] && groupedPeriods[days[i]][j] 
                      ? groupedPeriods[days[i]][j] 
                      : [];
                    
                    const normalPeriodForCell = timetable.periods.find(p => p.day === days[i] && p.hour === j);
                  %>
                  <td id="cell_<%= i %>_<%= j %>">
                    <% if (groupedPeriodsForCell.length > 0) { %>
                      <% groupedPeriodsForCell.forEach((groupedPeriod, index) => { %>
                        <div style="display: flex; justify-content: space-between; margin-bottom: 10px;">
                          <div>
                            <% if (groupedPeriod.subject.type === 'Non-Academic') { %>
                              <!-- Special Period Display -->
                              <strong><%= groupedPeriod.subject.name %></strong><br>
                              Time: <%= groupedPeriod.startTime %> - <%= groupedPeriod.endTime %><br>
                            <% } else { %>
                              <!-- Regular Period Display -->
                              Batch: <%= groupedPeriod.batch?.name || 'N/A' %><br>
                              Subject: <%= groupedPeriod.subject?.name || 'N/A' %><br>
                              Faculty: <%= groupedPeriod.faculty?.name || 'N/A' %><br>
                              Time: <%= groupedPeriod.startTime %> - <%= groupedPeriod.endTime %><br>
                              Room: <%= groupedPeriod.room || 'N/A' %><br>
                            <% } %>
                          </div>
                          <div>
                            <button onclick="editBatchPeriodForm('<%= groupedPeriod.room %>','<%= groupedPeriod._id %>', <%= i %>, <%= j %>, '<%= groupedPeriod.subject?._id || '' %>', '<%= groupedPeriod.faculty?._id || '' %>', '<%= groupedPeriod.startTime %>', '<%= groupedPeriod.endTime %>', '<%= groupedPeriod.batch?._id || '' %>')" class="btn btn-sm btn-warning">Edit</button>
                            <button onclick="deletePeriod('<%= groupedPeriod._id %>')" class="btn btn-sm btn-danger">Delete</button>
                          </div>
                        </div>
                        <% if (index < groupedPeriodsForCell.length - 1) { %><hr><% } %>
                      <% }); %>
                    <% } else if (normalPeriodForCell) { %>
                      <div style="display: flex; justify-content: space-between;">
                        <div>
                          <% if (normalPeriodForCell.subject.type=='Non-Academic'){%>
                            <!-- Special Period Display -->
                            <strong><%= normalPeriodForCell.subject.name %></strong><br>
                            Time: <%= normalPeriodForCell.startTime %> - <%= normalPeriodForCell.endTime %><br>
                          <% } else { %>
                            <!-- Regular Period Display -->
                            Subject: <%= normalPeriodForCell.subject?.name || 'N/A' %><br>
                            Faculty: <%= normalPeriodForCell.faculty?.name || 'N/A' %><br>
                            Time: <%= normalPeriodForCell.startTime %> - <%= normalPeriodForCell.endTime %><br>
                            Room: <%= normalPeriodForCell.room || 'N/A' %><br>
                          <% } %>
                        </div>
                        <div>
                          <button onclick="editPeriodForm('<%= normalPeriodForCell._id %>', <%= i %>, <%= j %>, '<%= normalPeriodForCell.subject?._id || '' %>', '<%= normalPeriodForCell.faculty?._id || '' %>', '<%= normalPeriodForCell.startTime %>', '<%= normalPeriodForCell.endTime %>')" class="btn btn-sm btn-warning">Edit</button>
                          <button onclick="deletePeriod('<%= normalPeriodForCell._id %>')" class="btn btn-sm btn-danger">Delete</button>
                        </div>
                      </div>
                    <% } else { %>
                      <button onclick="createPeriodForm(<%= i %>, <%= j %>)" class="btn btn-primary btn-sm">+</button>
                    <% } %>
                  </td>
                <% } %>
              </tr>
            <% } %>
          </tbody>
        </table>
      </div>
      
    <a href="/admin/download-timetable?id=<%= timetable._id %>" class="btn btn-secondary ml-2">Download Time Table</a>

    <!-- Modal for creating/editing period -->
    <div class="modal fade" id="periodModal" tabindex="-1" aria-labelledby="periodModalLabel" aria-hidden="true">
        <div class="modal-dialog">
          <div class="modal-content">
            <div class="modal-header">
              <h5 class="modal-title" id="periodModalLabel">Add/Edit Period</h5>
              <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
              <form id="periodForm">
                <input type="hidden" id="periodIdInput" name="periodId">
                <input type="hidden" id="dayInput" name="day">
                <input type="hidden" id="hourInput" name="hour">
                <input type="hidden" id="sectionInput" name="section" value="<%= timetable.section._id %>">
                <input type="hidden" id="yearInput" name="year" value="<%= timetable.year._id %>">
                <input type="hidden" id="branchInput" name="branch" value="<%= timetable.branch._id %>">
                <input type="hidden" id="semesterInput" name="semester" value="<%= timetable.semester._id %>">
      
                <div class="form-group">
                  <label>Select Period Type:</label>
                  <div>
                    <label>
                      <input type="radio" name="periodType" value="Special" onclick="handlePeriodTypeChange(this.value)"> Special Period
                    </label>
                  </div>
                  <div>
                    <label>
                      <input type="radio" name="periodType" value="Regular" onclick="handlePeriodTypeChange(this.value)" checked> Regular Period
                    </label>
                  </div>
                </div>
      
                <div class="mb-3" id="specialPeriodSelection" style="display: none;">
                  <label for="specialPeriod" class="form-label">Special Period</label>
                  <select id="specialPeriod" name="subject" class="form-control">
                    <option value="" disabled selected>Select Special Period</option>
                    <!-- Options will be populated dynamically -->
                  </select>
                </div>
                
      
                <!-- Regular Period Fields -->
                <div id="regularPeriodFields">
                  <div class="mb-3">
                    <label for="subject" class="form-label">Subject</label>
                    <select id="subject" name="subject" class="form-control">
                      <option value="" disabled selected>Select Subject</option>
                      <!-- Options will be populated dynamically -->
                    </select>
                  </div>
                  <div class="mb-3">
                    <label for="faculty" class="form-label">Faculty</label>
                    <select id="faculty" name="faculty" class="form-control">
                      <option value="" disabled selected>Select Faculty</option>
                      <!-- Options will be populated dynamically -->
                    </select>
                  </div>
                </div>
      
                <!-- Start and End Time Fields -->
                <div class="mb-3">
                  <label for="startTime" class="form-label">Start Time</label>
                  <input type="time" id="startTime" name="startTime" class="form-control" required>
                </div>
                <div class="mb-3">
                  <label for="endTime" class="form-label">End Time</label>
                  <input type="time" id="endTime" name="endTime" class="form-control" required>
                </div>
      
                <!-- Room Field (Not mandatory for Special Periods) -->
                <div class="mb-3" id="roomField">
                  <label for="room" class="form-label">Room</label>
                  <input type="text" id="room" name="room" class="form-control">
                </div>
      
                <!-- Batch Checkbox and Selection -->
                <div class="mb-3 form-check" id="batchCheckbox">
                  <input type="checkbox" class="form-check-input" id="includeBatches" onchange="toggleBatchSelection()">
                  <label class="form-check-label" for="includeBatches">Include Batches</label>
                </div>
                <div id="batchSelection" style="display: none;">
                  <label for="batch" class="form-label">Batch</label>
                  <div id="batchCheckboxContainer">
                    <!-- Checkboxes will be populated dynamically -->
                  </div>
                </div>
      
                <button type="submit" class="btn btn-primary">Save</button>
              </form>
            </div>
          </div>
        </div>
      </div>
      

  <script>
// Function to display the period creation form
function createPeriodForm(day, period) {
    document.getElementById('room').value = '';
    document.getElementById('periodIdInput').value = ''; // Clear the period ID for a new period
    document.getElementById('dayInput').value = day + 1; // Display day starting from 1
    document.getElementById('hourInput').value = period ; // Display period starting from 1

    const startTime = document.getElementById(`startTime_${period }`).value;
    const endTime = document.getElementById(`endTime_${period }`).value;

    document.getElementById('startTime').value = startTime;
    document.getElementById('endTime').value = endTime;

    const section = document.getElementById('sectionInput').value;
    const year = document.getElementById('yearInput').value;
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;

    populateDropdowns(branch, semester, '', '', day + 1, period + 1);
    
    const periodModal = new bootstrap.Modal(document.getElementById('periodModal'));
    periodModal.show();
}

function editBatchPeriodForm(room,periodId, day, period, subject, faculty, startTime, endTime, batchId) {
    // Set the values in the form fields
    document.getElementById('periodIdInput').value = periodId;
    document.getElementById('room').value = room;
    document.getElementById('dayInput').value = day + 1; // Days are 1-based in the form
    document.getElementById('hourInput').value = period + 1; // Periods are 1-based in the form
    document.getElementById('startTime').value = startTime;
    document.getElementById('endTime').value = endTime;

    // Get branch, semester, and section values from the form
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;
    const section = document.getElementById('sectionInput').value;

    // Populate the subject and faculty dropdowns
    populateDropdowns(branch, semester, subject, faculty, day + 1, period + 1);

    // Populate the batch selection and pre-select the appropriate batch
    fetch(`/admin/batches?branch=${branch}&section=${section}&semester=${semester}`)
        .then(response => response.json())
        .then(batches => {
            const batchCheckboxContainer = document.getElementById('batchCheckboxContainer');
            batchCheckboxContainer.innerHTML = ''; // Clear any existing checkboxes

            batches.forEach(batch => {
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.value = batch._id;
                checkbox.id = `batch_${batch._id}`;
                checkbox.name = 'batches';
                checkbox.classList.add('form-check-input');

                // Pre-select the batch if it matches
                if (batch._id === batchId) {
                    checkbox.checked = true;
                }

                const label = document.createElement('label');
                label.htmlFor = `batch_${batch._id}`;
                label.classList.add('form-check-label');
                label.textContent = batch.name;

                const div = document.createElement('div');
                div.classList.add('form-check');
                div.appendChild(checkbox);
                div.appendChild(label);

                batchCheckboxContainer.appendChild(div);
            });

            // Show batch selection container
            document.getElementById('batchSelection').style.display = 'block';
        });

    // Show the modal for editing the period
    const periodModal = new bootstrap.Modal(document.getElementById('periodModal'));
    periodModal.show();
}


function editPeriodForm(periodId, day, period, subject, faculty, startTime, endTime) {
    // Set the values in the form fields
    document.getElementById('room').value = '';
    document.getElementById('periodIdInput').value = periodId;
    document.getElementById('dayInput').value = day + 1; // Days are 1-based in the form
    document.getElementById('hourInput').value = period + 1; // Periods are 1-based in the form
    document.getElementById('startTime').value = startTime;
    document.getElementById('endTime').value = endTime;

    // Get branch, semester, and section values from the form
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;
    
    // Populate the subject and faculty dropdowns
    populateDropdowns(branch, semester, subject, faculty, day + 1, period + 1);

    // Show the modal for editing the period
    const periodModal = new bootstrap.Modal(document.getElementById('periodModal'));
    periodModal.show();
}

function populateDropdowns(branch, semester, selectedSubject = '', selectedFaculty = '', day, hour) {
    const subjectSelect = document.getElementById('subject');
    const facultySelect = document.getElementById('faculty');
    
    // Populate subjects
    fetch(`/admin/subject?branch=${branch}&semester=${semester}`)
        .then(response => response.json())
        .then(subjects => {
            subjectSelect.innerHTML = '<option value="" disabled selected>Select Subject</option>';
            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject._id;
                option.textContent = subject.name;
                if (subject._id === selectedSubject) {
                    option.selected = true;
                }
                subjectSelect.appendChild(option);
            });
        });

    // Disable faculty select initially
    facultySelect.disabled = true;
    facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';

    // Populate faculties when a subject is selected
    subjectSelect.addEventListener('change', () => {
        const selectedSubjectId = subjectSelect.value;
        if (selectedSubjectId) {
            fetch(`/admin/faculties?branch=${branch}&subject=${selectedSubjectId}&day=${day}&hour=${hour-1}`)
                .then(response => response.json())
                .then(faculties => {
                    facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
                    faculties.forEach(faculty => {
                        const option = document.createElement('option');
                        option.value = faculty._id;
                        option.textContent = faculty.name;
                        if (faculty._id === selectedFaculty) {
                            option.selected = true;
                        }
                        facultySelect.appendChild(option);
                    });
                    facultySelect.disabled = false;
                });
        } else {
            facultySelect.disabled = true;
            facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
        }
    });
}



// Function to delete a period
function deletePeriod(periodId) {
    if (confirm('Are you sure you want to delete this period?')) {
        fetch(`/admin/timetable/period/${periodId}`, {
            method: 'DELETE'
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                alert('Period deleted successfully');
                location.reload(); // Reload the page to reflect changes
            } else {
                alert('Error deleting period');
            }
        });
    }
}


// Function to display the periods grouped in one cell if they belong to different batches
function displayGroupedPeriods(periods) {
    return periods.map(period => `
        <div>
            ${period.batch.name}<br>
            ${period.subject.name}<br>
            ${period.faculty.name}<br>
            ${period.startTime} - ${period.endTime}<br>
            <button onclick="editPeriodForm('${period._id}', ${period.day - 1}, ${period.hour - 1}, '${period.subject._id}', '${period.faculty._id}', '${period.startTime}', '${period.endTime}')" class="btn btn-sm btn-warning">Edit</button>
            <button onclick="deletePeriod('${period._id}')" class="btn btn-sm btn-danger">Delete</button>
        </div>
        <hr>
    `).join('');
}

// Function to toggle batch selection visibility
function toggleBatchSelection() {
    const batchSelection = document.getElementById('batchSelection');
    const subjectField = document.getElementById('subjectPeriod');
    const facultyField = document.getElementById('facultyPeriod');
    const batchFormContainer = document.getElementById('batchFormContainer');
    const includeBatchesCheckbox = document.getElementById('includeBatches');

    if (includeBatchesCheckbox.checked) {
      batchSelection.style.display = 'block';
    } else {
      batchSelection.style.display = 'none';
    }
    if (document.getElementById('includeBatches').checked) {
        batchSelection.style.display = 'block';
        subjectField.style.display = 'none';
        facultyField.style.display = 'none';
        populateBatchSelection();
    } else {
        batchSelection.style.display = 'none';
        subjectField.style.display = 'block';
        facultyField.style.display = 'block';
        batchFormContainer.innerHTML = ''; // Clear batch forms
    }
}
function populateBatchSelection() {
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;
    const section = document.getElementById('sectionInput').value;

    const batchCheckboxContainer = document.getElementById('batchCheckboxContainer');
    if (!batchCheckboxContainer) {
        console.error('batchCheckboxContainer element not found');
        return;
    }

    fetch(`/admin/batches?branch=${branch}&semester=${semester}&section=${section}`)
        .then(response => response.json())
        .then(batches => {
          batchCheckboxContainer.innerHTML='<p></p>'
            batchCheckboxContainer.innerHTML = ''; // Clear previous checkboxes

            if (batches.length === 0) {
                batchCheckboxContainer.innerHTML = '<p>No batches available.</p>';
                return;
            }

            batches.forEach(batch => {
                const checkboxDiv = document.createElement('div');
                checkboxDiv.classList.add('form-check');
                
                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input';
                checkbox.id = `batch_${batch._id}`;
                checkbox.value = batch._id;

                const label = document.createElement('label');
                label.className = 'form-check-label';
                label.setAttribute('for', `batch_${batch._id}`);
                label.textContent = batch.name;

                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                batchCheckboxContainer.appendChild(checkboxDiv);
            });
        })
        .catch(error => {
            console.error('Error fetching batches:', error);
            if (batchCheckboxContainer) {
                batchCheckboxContainer.innerHTML = '<p>Error loading batches. Please try again later.</p>';
            }
        });
}

// Function to add form for each selected batch
function addBatchForm(batchId, batchName) {
    const batchFormsContainer = document.getElementById('batchFormContainer');

    const formDiv = document.createElement('div');
    formDiv.classList.add('mb-3');

    const batchNameInput = document.createElement('input');
    batchNameInput.type = 'hidden';
    batchNameInput.name = 'batches[]';
    batchNameInput.value = batchId;

    const subjectSelect = document.createElement('select');
subjectSelect.name = `batchSubject_${batchId}`;  // Unique name for each batch
subjectSelect.classList.add('form-control', 'mb-2');
subjectSelect.required = true;
subjectSelect.innerHTML = '<option value="" disabled selected>Select Subject</option>';

const facultySelect = document.createElement('select');
facultySelect.name = `batchFaculty_${batchId}`;  // Unique name for each batch
facultySelect.classList.add('form-control', 'mb-2');
facultySelect.required = true;
facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';


    // Append inputs to the formDiv
    formDiv.appendChild(batchNameInput);
    formDiv.appendChild(document.createTextNode(`Batch: ${batchName}`));
    formDiv.appendChild(subjectSelect);
    formDiv.appendChild(facultySelect);

    // Append formDiv to the batchFormsContainer
    batchFormsContainer.appendChild(formDiv);

    // Fetch and populate subjects and faculties based on the branch and semester
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;

    fetch(`/admin/subject?branch=${branch}&semester=${semester}`)
        .then(response => response.json())
        .then(subjects => {
            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject._id;
                option.textContent = subject.name;
                subjectSelect.appendChild(option);
            });
        });

    subjectSelect.addEventListener('change', () => {
        const selectedSubjectId = subjectSelect.value;
        const day = document.getElementById('dayInput').value;
    const hour = document.getElementById('hourInput').value;
        if (selectedSubjectId) {
            fetch(`/admin/faculties?branch=${branch}&subject=${selectedSubjectId}&day=${day}&hour=${hour}`)
                .then(response => response.json())
                .then(faculties => {
                    facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
                    faculties.forEach(faculty => {
                        const option = document.createElement('option');
                        option.value = faculty._id;
                        option.textContent = faculty.name;
                        facultySelect.appendChild(option);
                    });
                    facultySelect.disabled = false;
                });
        } else {
            facultySelect.disabled = true;
            facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
        }
    });
}

// Function to generate forms for selected batches
function generateBatchForms() {
    const selectedBatches = Array.from(document.querySelectorAll('#batchCheckboxContainer input[type="checkbox"]:checked'))
        .map(checkbox => ({
            id: checkbox.value,
            name: checkbox.nextElementSibling.textContent
        }));

    const batchFormContainer = document.getElementById('batchFormContainer');
    batchFormContainer.innerHTML = ''; // Clear previous forms

    selectedBatches.forEach(batch => {
        addBatchForm(batch.id, batch.name);
    });
}

document.addEventListener('DOMContentLoaded', () => {
    document.getElementById('includeBatches').addEventListener('change', toggleBatchSelection);
    document.getElementById('batchCheckboxContainer').addEventListener('change', generateBatchForms);
});

// Add selected batches to the list
function addBatch() {
    const batchSelect = document.getElementById('batch');
    const selectedBatches = Array.from(batchSelect.selectedOptions);
    const selectedSubjects = document.getElementById('selectedSubjects');

    selectedBatches.forEach(batch => {
        const batchId = batch.value;
        const batchName = batch.textContent;

        const existing = selectedSubjects.querySelector(`.subject-item[data-batch-id="${batchId}"]`);
        if (!existing) {
            const item = document.createElement('div');
            item.className = 'subject-item alert alert-primary d-flex justify-content-between align-items-center';
            item.dataset.batchId = batchId;
            item.textContent = batchName;

            const removeButton = document.createElement('button');
            removeButton.className = 'btn btn-sm btn-danger';
            removeButton.textContent = 'Remove';
            removeButton.addEventListener('click', function () {
                selectedSubjects.removeChild(item);
            });

            item.appendChild(removeButton);
            selectedSubjects.appendChild(item);
            
            // Add form for the batch
            addBatchForm(batchId, batchName);
        }
    });
}


// Function to populate the dropdowns for a specific batch
function populateDropdownsForBatch(batch) {
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;
    const day = document.getElementById('dayInput').value;
    const hour = document.getElementById('hourInput').value;

    // Fetch subjects and populate the subject dropdown
    fetch(`/admin/subject?branch=${branch}&semester=${semester}`)
        .then(response => response.json())
        .then(subjects => {
            const subjectSelect = document.getElementById(`batchSubject_${batch}`);
            subjectSelect.innerHTML = '<option value="" disabled selected>Select Subject</option>';
            subjects.forEach(subject => {
                const option = document.createElement('option');
                option.value = subject._id;
                option.textContent = subject.name;
                subjectSelect.appendChild(option);
            });
        });

    // Fetch faculties based on the selected subject for this batch
    document.getElementById(`batchSubject_${batch}`).addEventListener('change', function() {
        const selectedSubjectId = this.value;
        const facultySelect = document.getElementById(`batchFaculty_${batch}`);
        const day = document.getElementById('dayInput').value;
        const hour = document.getElementById('hourInput').value;
        if (selectedSubjectId) {
            fetch(`/admin/faculties?branch=${branch}&subject=${selectedSubjectId}&day=${day}&hour=${hour}`)
                .then(response => response.json())
                .then(faculties => {
                    facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
                    faculties.forEach(faculty => {
                        const option = document.createElement('option');
                        option.value = faculty._id;
                        option.textContent = faculty.name;
                        facultySelect.appendChild(option);
                    });
                    facultySelect.disabled = false;
                });
        } else {
            facultySelect.disabled = true;
            facultySelect.innerHTML = '<option value="" disabled selected>Select Faculty</option>';
        }
    });
}

// Function to populate the checkboxes for a specific batch
function populateCheckboxesForBatch(batchId) {
    const branch = document.getElementById('branchInput').value;
    const semester = document.getElementById('semesterInput').value;
    const day = document.getElementById('dayInput').value;
    const hour = document.getElementById('hourInput').value;

    // Fetch subjects and populate the subject checkboxes
    fetch(`/admin/subject?branch=${branch}&semester=${semester}`)
        .then(response => response.json())
        .then(subjects => {
            const subjectCheckboxContainer = document.getElementById(`subjectCheckboxContainer_${batchId}`);
            subjectCheckboxContainer.innerHTML = ''; // Clear previous checkboxes

            subjects.forEach(subject => {
                const checkboxDiv = document.createElement('div');
                checkboxDiv.classList.add('form-check');

                const checkbox = document.createElement('input');
                checkbox.type = 'checkbox';
                checkbox.className = 'form-check-input';
                checkbox.id = `subject_${subject._id}_${batchId}`;
                checkbox.value = subject._id;

                const label = document.createElement('label');
                label.className = 'form-check-label';
                label.setAttribute('for', `subject_${subject._id}_${batchId}`);
                label.textContent = subject.name;

                checkboxDiv.appendChild(checkbox);
                checkboxDiv.appendChild(label);
                subjectCheckboxContainer.appendChild(checkboxDiv);
            });
        });

    // Fetch faculties based on the selected subjects for this batch
    document.getElementById(`subjectCheckboxContainer_${batchId}`).addEventListener('change', function() {
        const selectedSubjectIds = Array.from(document.querySelectorAll(`#subjectCheckboxContainer_${batchId} .form-check-input:checked`)).map(checkbox => checkbox.value);
        const facultyCheckboxContainer = document.getElementById(`facultyCheckboxContainer_${batchId}`);
        
        facultyCheckboxContainer.innerHTML = ''; // Clear previous checkboxes

        selectedSubjectIds.forEach(subjectId => {
            fetch(`/admin/faculties?branch=${branch}&subject=${subjectId}&day=${day}&hour=${hour}`)
                .then(response => response.json())
                .then(faculties => {
                    faculties.forEach(faculty => {
                        const checkboxDiv = document.createElement('div');
                        checkboxDiv.classList.add('form-check');

                        const checkbox = document.createElement('input');
                        checkbox.type = 'checkbox';
                        checkbox.className = 'form-check-input';
                        checkbox.id = `faculty_${faculty._id}_${batchId}`;
                        checkbox.value = faculty._id;

                        const label = document.createElement('label');
                        label.className = 'form-check-label';
                        label.setAttribute('for', `faculty_${faculty._id}_${batchId}`);
                        label.textContent = faculty.name;

                        checkboxDiv.appendChild(checkbox);
                        checkboxDiv.appendChild(label);
                        facultyCheckboxContainer.appendChild(checkboxDiv);
                    });
                });
        });
    });
}

document.getElementById('periodForm').addEventListener('submit', function(event) {
    event.preventDefault();

    const formData = new FormData(this);
    const periodId = formData.get('periodId');
    const method = periodId ? 'PUT' : 'POST';
    const url = periodId ? `/admin/timetable/period/${periodId}` : '/admin/timetable/period';

    const batchCheckboxContainer = document.getElementById('batchCheckboxContainer');
    const selectedBatches = Array.from(batchCheckboxContainer.querySelectorAll('input[type="checkbox"]:checked')).map(cb => cb.value);

    const batchDetails = selectedBatches.map(batch => {
        const subject = formData.get(`batchSubject_${batch}`);
        const faculty = formData.get(`batchFaculty_${batch}`);

        // Add logging for debugging
        console.log(`Batch ID: ${batch}, Subject: ${subject}, Faculty: ${faculty}`);

        return {
            batchId: batch,
            subject: subject,
            faculty: faculty
        };
    });

    const requestBody = {
        day: formData.get('day'),
        hour: formData.get('hour'),
        branch: formData.get('branch'),
        subject:formData.get('subject'),
        room:formData.get('room'),
        faculty:formData.get('faculty'),
        year: formData.get('year'),
        section: formData.get('section'),
        semester: formData.get('semester'),
        startTime: formData.get('startTime'),
        endTime: formData.get('endTime'),
        batchDetails: batchDetails
    };

    console.log(requestBody);

    fetch(url, {
        method: method,
        headers: {
            'Content-Type': 'application/json'
        },
        body: JSON.stringify(requestBody)
    })
    .then(response => response.json())
    .then(data => {
        if (data.success) {
            alert('Period saved successfully');
            window.location.reload();
        } else {
            alert('Error saving period: ' + data.message);
        }
    })
    .catch(error => {
        console.error('Error saving period:', error);
        alert('Error saving period');
    });
});

function handlePeriodTypeChange(type) {
    const specialPeriodSelection = document.getElementById('specialPeriodSelection');
    const regularPeriodFields = document.getElementById('regularPeriodFields');
    const batchCheckbox = document.getElementById('batchCheckbox');
    const roomField = document.getElementById('roomField');

    if (type === 'Special') {
        specialPeriodSelection.style.display = 'block';
        regularPeriodFields.style.display = 'none';
        batchCheckbox.style.display = 'none'; // Hide batch option for special periods
        roomField.style.display = 'block';
        specialPeriodSelect.disabled = false;
        loadNonAcademicSubjects();
    } else {
        specialPeriodSelection.style.display = 'none';
        regularPeriodFields.style.display = 'block';
        batchCheckbox.style.display = 'block'; // Show batch option for regular periods
        roomField.style.display = 'block'; // Show room for regular periods
    }
}

function loadNonAcademicSubjects() {
    fetch('/admin/non-academic-subjects')
      .then(response => response.json())
      .then(data => {
        const specialPeriodSelect = document.getElementById('specialPeriod');
        specialPeriodSelect.innerHTML = '<option value="" disabled selected>Select Special Period</option>';
        
        data.forEach(subject => {
          const option = document.createElement('option');
          option.value = subject._id;
          option.textContent = subject.name;
          specialPeriodSelect.appendChild(option);
        });
      })
      .catch(error => console.error('Error loading non-academic subjects:', error));
  }

  // Call this function when the form/modal is shown
  loadNonAcademicSubjects();

// Form Submission Logic
document.getElementById('periodForm').addEventListener('submit', function(event) {
  const periodType = document.querySelector('input[name="periodType"]:checked').value;
  if (periodType === 'Special') {
    const specialPeriod = document.getElementById('specialPeriod').value;
    if (!specialPeriod) {
      event.preventDefault(); // Prevent submission
      alert('Please select a valid special period.');
    }
  }
});

</script>
</body>
